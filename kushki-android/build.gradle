import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    ext.kotlin_version = '1.4.30'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.5'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group = 'com.kushkipagos'
version '1.3.22'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

repositories {
    jcenter()
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android:android:4.1.1.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.30"
    implementation files('../libs/kushki-library.jar')
    implementation 'com.siftscience:sift-android:0.11.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-nop:1.7.30'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    // Source: https://git.io/vPL8S
    testImplementation 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    testImplementation('com.github.tomakehurst:wiremock:2.26.3') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

task unitTest(type: Test) {
    include 'com/kushkipagos/android/**'
    exclude 'com/kushkipagos/android/integration/**'
}

task integrationTest(type: Test) {
    include 'com/kushkipagos/android/integration/**'
}

ext {
    license = 'MIT'
    licenseUrl = 'https://github.com/Kushki/kushki-android/blob/master/LICENSE.txt'
    gitUrl = 'https://github.com/Kushki/kushki-android.git'
    scmUrl = 'scm:git:' + gitUrl
    packageName = 'kushki-android'
    packageDescription = 'Librer√≠a para integrarse con Kushki desde Android'
    versionTag = version
}

install {
    repositories.mavenInstaller {
        pom.artifactId = packageName
        pom.version = versionTag
        pom.project {
            name packageName
            description packageDescription
            url gitUrl
            organization {
                name 'Kushki S.A.'
                url 'https://www.kushkipagos.com'
            }
            developers {
                developer {
                    id 'kushki'
                    name 'kushki'
                    email 'dev@kushkipagos.com'
                }
            }
            licenses {
                license {
                    name license
                    url licenseUrl
                    distribution 'repo'
                }
            }
            scm {
                url gitUrl
                connection scmUrl
                developerConnection scmUrl
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'kushki-android'
        name = packageName
        desc = packageDescription
        userOrg = user
        licenses = [license]
        vcsUrl = gitUrl
        websiteUrl = gitUrl
        publicDownloadNumbers = false
        version {
            name = versionTag
            desc = packageDescription
            vcsTag = 'v' + versionTag
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
                user = System.getenv('MAVEN_CENTRAL_USER')
                password = System.getenv('MAVEN_CENTRAL_TOKEN')
                close = '1'
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task printVersion doLast {
    println project.version
}

tasks.withType(Test) {
    outputs.upToDateWhen { false }
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR, TestLogEvent.STANDARD_OUT
    }
}